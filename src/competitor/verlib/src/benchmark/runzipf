#!/usr/bin/python
#
# run all tests
#
import os
import sys
import socket
from datetime import date

def getOption(str) :
    return sys.argv.count(str) > 0

def getArg(str, default) :
  a = sys.argv
  l = len(a)
  for i in range(1, l) :
    if (a[i] == str and  (i+1 != l)) :
        return sys.argv[i+1]
  return default

# all = getOption("-all")
# short = getOption("-short")

# suffixes_all = ["_nohelp","_ver_nohelp_ls","","_ver_ls"]
suffixes_all = ["_ver_ls"]
suffixes_none = [""]

update_percents = [5, 50]
if getOption("-twenty") : update_percents = [20]

rounds = int(getArg("-r", 3));
time = float(getArg("-t", 1.0));

shuffle = getOption("-shuffle");

if (getOption("-help") or getOption("-help")) :
    print("./runall [-all] [-short] [-t t] [-hl] [-twenty] [-test] [-r n] [-help]")

zipfians = [0, 0.5, 0.75, .99]

trees = ["btree"]
tree_sizes = [100000, 10000000]

today = date.today().strftime("%m_%d_%y")
hostname = socket.gethostname()

print(hostname)
print(today)
filename = "../../timings/zipf_" + hostname + "_" + today
    
if os.path.exists(filename) :
    os.remove(filename)

test_only = False
if (sys.argv.count("-test") > 0):
    test_only = True
    rounds = 1
    time = .1
    update_percents = [5]
    tree_sizes = [10000]
    
def detectCPUs():
    """
     Detects the number of CPUs on a system. Cribbed from pp.
     """
    # Linux, Unix and MacOS:
    if hasattr(os, "sysconf"):
       if os.sysconf_names.has_key("SC_NPROCESSORS_ONLN"):
           # Linux & Unix:
           ncpus = os.sysconf("SC_NPROCESSORS_ONLN")
           if isinstance(ncpus, int) and ncpus > 0:
               return ncpus
       else: # OSX:
           return int(os.popen2("sysctl -n hw.ncpu")[1].read())
    # Windows:
    if os.environ.has_key("NUMBER_OF_PROCESSORS"):
           ncpus = int(os.environ["NUMBER_OF_PROCESSORS"]);
           if ncpus > 0:
               return ncpus
    return 1 # Default

maxcpus = detectCPUs()

def getProcessors() :
    if maxcpus == 40:
        processors = [1,4,16,20,40,60,80]
    elif maxcpus == 144:
        # processors = [1,4,16,32,72,144]
        processors = [1,72,144,200]
    else:
        processors = [1,4,16]+range(16,maxcpus+1,16)
    return processors

def runstring(op) :
    if test_only :
        cmd = op
    else :
        cmd = op + " >> " + filename
    os.system("echo \"" + cmd + "\"")
    x = os.system(cmd)
    if (x) :
        if (os.WEXITSTATUS(x) == 0) : raise NameError("  aborted: " + op)
        os.system("echo Failed")
    
def runtest(test,procs,n,z,u,th) :
    str_update = "-u " + str(u) + " "
    str_zipfians = "-z " + str(z) + " "
    str_rounds = "-r " + str(rounds) + " "
    str_time = "-tt " + str(time) + " "
    str_n = "-n " + str(n) + " "
    if shuffle : str_other = "-shuffle "
    else : str_other = ""
    runstring("PARLAY_NUM_THREADS=" + str(th) + " numactl -i all ./" + test + " " + str_time + str_rounds + str_n + str_update + str_zipfians + str_other)

def run_tests(tests,suffixes,sizes) :
    zipf = zipfians
    threads = [maxcpus-1]
    for test in tests :
        for n in sizes :
            for u in update_percents :
                for suffix in suffixes:
                    for z in zipf :
                        for th in threads:
                            runtest(test + suffix, maxcpus, n, z, u, th)

try :
    processors = getProcessors()
    os.system("cd ../setbench && make leis_olc_art srivastava_abtree_pub")
    os.system("make -j")
    runstring("git rev-parse --short HEAD")
    run_tests(trees,suffixes_all,tree_sizes)
            
except NameError,v :
  x, = v
  print "TEST TERMINATED ABNORMALLY:\n"+x
